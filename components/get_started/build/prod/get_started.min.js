"undefined"===typeof window.K_Components&&(window.K_Components={});
K_Components.get_started=function(){function a(){this.step_6="\x3cdiv\x3e{{text}}\x3c/div\x3e";this.step_7="this.text \x3d 'default';";this.step_8='\x3cnameofcomponent text\x3d"new text"\x3e\x3c/nameofcomponent\x3e'}a.prototype.k_html="\x3c!-- get_started Created by keleko34, shows how to get started using the library --\x3e\x3cdiv class\x3d'get_started'\x3e  \x3cdiv class\x3d'get_started__title'\x3eGetting Started\x3c/div\x3e  \x3cdiv class\x3d'get_started__types'\x3e    \x3cdiv class\x3d'get_started__types__text'\x3e      There are two ways to set up a project, You can either use the \x3ca class\x3d'cli' href\x3d'#download'\x3eCLI Tool\x3c/a\x3e or you can \x3ca class\x3d'lib' href\x3d'#download'\x3eInstall the Library\x3c/a\x3e into your project using npm, this getting started guide will use the cli tool.    \x3c/div\x3e  \x3c/div\x3e  \x3cdiv class\x3d'get_started__steps'\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 1.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        install the konnekt cli tool using npm with the following command      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'npm install --global konnekt-cli'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 2.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        You can now use the konnekt cli to create a new project in any directory using the following command, this command will direct You through a series of prompts to help create a new project, this command will also set up a base component for you.      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'konnekt init'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 3.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        To view your new page konnekt also has a development server built in, to start it just use the following command, hitting ctrl+o will automatically open a webpage to your new app.      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'konnekt server 8080'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 4.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        You can create many new components to be placed inside Your app by simply using the create command and follow the included prompt.      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'konnekt create'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 5.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        in order to view your new component you can add it to your entry component by simply inserting the html for it. You can also use it in the browser url by adding #nameofcomponent to the url, this acts like changing the page and swapping out the content.      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'\x3cnameofcomponent\x3e\x3c/nameofcomponent\x3e'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 6.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        Lets add a dynamic bindable text to your new component, in order to do that you can first add the html to your components html file:      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'{{step_6}}'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 7.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        Now you can add the property to the components js, the value you set here will be the default value the component will show.      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'{{step_7}}'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 8.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        You can easily change this text from any point you use this component by setting its attribute name      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'{{step_8}}'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_started__step'\x3e      \x3cdiv class\x3d'get_started__step_number'\x3eStep 9.\x3c/div\x3e      \x3cdiv class\x3d'get_started__step_text'\x3e        Now that you have created your component maybe now you want to show it to the world, there are four environments your component can be in: `dev`, `qa`, `uat` and `prod`. lets build your new component and your base component for showing in production. this command will have prompts to follow.      \x3c/div\x3e      \x3cdiv class\x3d'get_started__step_code'\x3e        \x3cide_code theme\x3d'light' code\x3d'konnekt build'\x3e\x3c/ide_code\x3e      \x3c/div\x3e    \x3c/div\x3e    \x3cdiv class\x3d'get_stated__end'\x3e      Now you have a successfully set up an app, go have fun creating things :)    \x3c/div\x3e  \x3c/div\x3e\x3c/div\x3e";a.prototype.k_css=
"/********************************* *  get_started *  Created by keleko34 *  shows how to get started using the library ********************************/.get_started {  font-family: 'open sans';  padding-bottom: 20px;}.get_started__title {  text-align: center;  font-weight: 600;  color: #87cefa;  padding: 15px 0px;  font-size: 36px;}.get_started__types {  text-align: left;}.desktop .get_started__types {  width: 800px;  margin: 0 auto;}.mobile .get_started__types {  padding:10px 20px;}.get_started__types__text {  font-size: 14px;  font-weight: 500;  margin-bottom: 30px;}.desktop .get_started__types__text {  font-size: 18px;}.mobile .get_started__types__text {  font-size: 20px;  font-style: italic;}.get_started__types__text a.cli, get_started__types__text a.cli:active {  color:#84a2ea;  text-decoration: none;}.get_started__types__text a.lib, get_started__types__text a.lib:active {  color:#bc68d6;  text-decoration: none;}.get_started__steps {  margin-top: -40px;}.desktop .get_started__steps {  width: 800px;  margin: 0 auto;}.mobile .get_started__steps {  padding: 0px 20px;}.get_started__step {  margin-top:20px;}.get_started__step_number {  font-family: 'wolf_in_the_cityregular';  color: #87cefa;  font-size:76px;}.get_started__step_text {  font-weight: 300;  margin-top: -10px;  margin-bottom: 20px;}.desktop .get_started__step_text {  font-size: 16px;}.mobile .get_started__step_text {  font-size: 22px;}.desktop .get_started__step_code {  width:350px;}.mobile .get_started__step_code {  width:100%;}.get_stated__end {  font-size:36px;  font-weight: 500;  margin: 30px 0px;  color: #3a3a3a;}";
return a}();